@startuml
title Project - Task - Create
!theme vibrant
participant Client as c
participant ProjectService as s
participant RedisCache as rc
participant IDGenService as idgen
queue Kafka as k
database MDMS as mdms
participant PersisterService as prs
participant IndexerService as idx
participant ErrorService as es
participant ElasticSearch as el
database Database as db
activate s
s -> s: Validate request body
alt request validation fails
    s -> s: Request validation failed
    s -> c: HttpStatus: 400 with appropriate error code
    note left
        Error Code: REQUEST_VALIDATION_FAILED
    end note
end
s -> s: Request validation successful
alt record already exists
    alt record found in cache
      s -> rc: Check using clientReferenceId/serverGeneratedId
      activate rc
      rc -> s: 1 row
      deactivate rc
      s -> c: HttpStatus: 400 with appropriate error code
      note left
          Error Code: RECORD_ALREADY_EXISTS
      end note
    end
    s -> rc: Check using clientReferenceId/serverGeneratedId
    activate rc
    rc -> s: 0 rows
    deactivate rc
    s -> db: Check if record already exists
    activate db
    db -> s: 1 row
    deactivate db
    s -> rc: Put data in cache using clientReferenceId/serverGeneratedId
    activate rc
    deactivate rc
    s -> c: HttpStatus: 400 with appropriate error code
    note left
        Error Code: RECORD_ALREADY_EXISTS
    end note
end
alt projectId invalid
    s -> db: Check if projectId exists
    activate db
    db -> s: 0 rows
    deactivate db
     s -> c: HttpStatus: 400 with appropriate error code
    note left
      Error Code: BAD_REQUEST
    end note
end
s -> db: Check if projectId exists
activate db
db -> s: 1 row
deactivate db
alt projectBeneficiaryId invalid
    s -> db: Check if projectBeneficiaryId exists
    activate db
    db -> s: 0 rows
    deactivate db
   s -> c: HttpStatus: 400 with appropriate error code
   note left
       Error Code: DEPENDENCY_ERROR
   end note
end
s -> db: Check if projectBeneficiaryId exists
activate db
db -> s: 1 row
deactivate db
alt id generation fails
    s -> idgen: /id/_generate
    activate idgen
    idgen -> s: HttpStatus: 400
    deactivate idgen
    s -> c: HttpStatus: 500 with appropriate error code
    note left
      Error Code: ID_GENERATION_FAILED
    end note
end

skinparam BoxPadding 40
s -> mdms: Fetch project type for the project task and check code paramater has multiround
activate mdms
mdms -> s: 1 row
deactivate mdms
alt project type exists and code is of multiround
    s -> s: group based on projectBeneficiaryId
    alt for each projectBeneficiaryId
        s -> db : fetch all the past tasks
        activate db
        db -> s : n rows
        deactivate db
        alt on exception
            s -> c  : HttpStatus 400 with appropriate error code
            note left
                Error Code : FAILED_TO_FETCH_TASK_FROM_DB
                                failed to make a db call
            end note
        end
        s -> s: prepend all the past task with current projectBeneficiaryId tasks
        alt for each tasks
            alt task ended go to next delivery or cycle
            end
            alt else
                alt mandatory cycle wait time is not null
                    alt mandatory cycle wait time is not over
                        s -> c  : HttpStatus 400 with appropriate error code
                        note left
                            Error Code : TASK_NOT_ALLOWED
                            Task not allowed as Mandatory
                            wait time for cycle is not over.
                        end note
                    end
                    alt else continue
                        s -> s
                    end
                end
                alt date of delivery exists
                    alt delivery status
                        alt DIRECT
                            alt future tasks exists
                                s -> c  : HttpStatus 400 with appropriate error code
                                note left
                                    Error Code : DIRECT_TASK_NOT_ALLOWED
                                    Direct task not allowed as
                                    un-finished/un-verified task exists
                                end note
                            end
                            alt Date_Of_Administration does not exists
                                    s -> s : mark as failed task and continue to next in list;
                            end
                            alt Date_Of_Verification does not exists
                                 s -> c  : HttpStatus 400 with appropriate error code
                                 note left
                                     Error Code : FUTURE_TASK_NOT_ALLOWED
                                     Future task not allowed in DIRECT strategy
                                 end note
                            end
                            alt mandatory delivery wait time is not null
                                alt mandatory delivery wait time is not over based on past task verification time and current task created time
                                    s -> c  : HttpStatus 400 with appropriate error code
                                    note left
                                        Error Code : TASK_NOT_ALLOWED
                                        Task not allowed as Mandatory
                                        wait time for delivery is not over.
                                    end note
                                end
                                alt else
                                    s -> s : continue for next task in list
                                end
                            end
                        end
                    end
                end
                alt else continue for next task / delivery
                    s -> s
                end
            end
        end
    end
end

s -> idgen: Generate ID
activate idgen
idgen -> s: Generated ID
deactivate idgen
s -> s: Update generated ID in Project Task Data
s -> k: Project Task Data /persist_topic
activate k
s -> rc: Put Project Task Data against clientReferenceId/serverGeneratedId in cache
activate rc
deactivate rc
s -> c: HttpStatus: 202 ACCEPTED
deactivate s
group async
    prs -> k: Consume Project Task Data
    activate prs
    idx -> k: Consume Project Task Data
    activate idx
    idx -> el: Store Project Task Data
    activate el
    deactivate el
    deactivate idx
    prs -> db: Persist Project Task Data
    activate db
    deactivate db
    deactivate prs
end
deactivate k
@enduml